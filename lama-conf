os.loadAPI("/lama/lama")

local tArgs = {...}
local commands

local function parse(start, facingOptional)
    local x, y, z, f = tArgs[start], tArgs[start + 1], tArgs[start + 2], tArgs[start + 3]

    if x == nil or y == nil or z == nil or (f == nil and not facingOptional) then
        error("Missing argument.")
    end

    x = math.floor(tonumber(x))
    y = math.floor(tonumber(y))
    z = math.floor(tonumber(z))
    if f ~= nil then
        f = string.lower(f)
        -- Rawget to avoid error on invalid indexing.
        if rawget(lama.side, f) == nil then
            error("Invalid facing '" .. f .. "'. Must be one of {north, east, south, west}.")
        end
        f = lama.side[f]
    end

    return x, y, z, f
end

local faceName = {"North", "East", "South", "West"}
local function display(x, y, z, f)
    print(string.format("X = %d, Y = %d, Z = %d, Facing = %s", x, y, z, faceName[f + 1]))
end

local function findCommand(name)
    if name then
        name = string.lower(name)
        for _,command in ipairs(commands) do
            if command.name == name then
                return command
            end
        end
    end
    return nil
end

-- No named keys to keep the order intact.
commands = {
    {
        name = "help",
        help = "Shows the help text for the specified command.",
        call = function()
            local command = findCommand(tArgs[2])
            if command == nil then
                print("No such command.")
            else
                print(command.help)
            end
        end
    },
    {
        name = "get",
        help = "Prints the current position and facing of the turtle.",
        call = function() display(lama.get()) end
    },
    {
        name = "set",
        help = "Sets the absolute coordinates the turtle believes itself to be at.",
        call = function()
            local x, y, z, f = parse(2)
            display(lama.set(x, y, z, f))
        end
    },
    {
        name = "reset",
        help = "Alias for 'set 0 0 0 0'.",
        call = function() display(lama.set(0, 0, 0, 0)) end
    },
    {
        name = "list",
        help = "Prints a list of known waypoints.",
        call = function()
            for name, x, y, z, f in lama.allWaypoints() do
                if f ~= nil then
                    print(string.format("%s (%d, %d, %d, %s)", name, x, y, z, faceName[f + 1]))
                else
                    print(string.format("%s (%d, %d, %d)", name, x, y, z))
                end
            end
        end
    },
    {
        name = "add",
        help = "Adds a new waypoint.",
        call = function()
            local x, y, z, f = parse(3, true)
            if lama.addWaypoint(tArgs[2], x, y, z, f) then
                print("Updated waypoint.")
            else
                print("Added waypoint.")
            end
        end
    },
    {
        name = "remove",
        help = "Removes a waypoint.",
        call = function()
            if not lama.removeWaypoint(tArgs[2]) then
                print("No such waypoint.")
            end
        end
    }
}

local command = findCommand(tArgs[1])
if #tArgs == 0 or command == nil then
    print("Usage: lama-conf <command> <args...>")
    local commandNames = {}
    for _,v in ipairs(commands) do
        table.insert(commandNames, v.name)
    end
    print("Commands: " .. table.concat(commandNames, ", "))
    print("Use 'lama-conf help command' to get more information on a specific command.")
else
    command.call()
end