--[[
    LAMA - Location Aware Movement API - 2013 Sangar

    This program is licensed under the MIT license.
    http://opensource.org/licenses/mit-license.php

    This script allows interacting with the API from the shell.
]]

os.loadAPI("/lama")

-------------------------------------------------------------------------------
-- Command logic                                                             --
-------------------------------------------------------------------------------

-- List of command line arguments, to access them via indexes without select().
local args = {...}

-- Forward declaration of table containing commands.
local commands

--[[
    Looks for a command with the specified name in the list of commands.

    @param name the name of the command to look for.
    @return the command on success; nil otherwise.
]]
local function findCommand(name)
    if name then
        name = string.lower(name)
        for _,command in ipairs(commands) do
            if command.name == name then
                return command
            end
        end
    end
    return nil
end

--[[
    Automatically generates a usage description, based on the command list.
]]
local function usage()
    print("Usage: " .. shell.getRunningProgram() .. " <command> <args...>")
    local commandNames = {}
    for _,v in ipairs(commands) do
        table.insert(commandNames, v.name)
    end
    print("Commands: " .. table.concat(commandNames, ", "))
    print("Use '" .. shell.getRunningProgram() ..
          " help command' to get more information on a specific command.")
end

local function run()
    local command = findCommand(args[1])
    if #args == 0 or command == nil then
        usage()
    else
        command.call()
    end
end

-------------------------------------------------------------------------------
-- Commands                                                                  --
-------------------------------------------------------------------------------

-- Forward declation for helper function namespace.
local private = {}

-- No named keys to keep the order intact.
commands = {
    {
        name = "help",
        help = "Shows the help text for the specified command.",
        call = function()
            local command = findCommand(args[2])
            if command == nil then
                print("No such command.")
            else
                print(command.help)
            end
        end
    },
    {
        name = "get",
        help = "Prints the current position and facing of the turtle.",
        call = function()
            write("Position = ")
            private.display(lama.get())
        end
    },
    {
        name = "set",
        help = "Sets the absolute coordinates the turtle believes itself to be at.",
        call = function()
            local x, y, z, f = private.parse(2)
            write("Position = ")
            private.display(lama.set(x, y, z, f))
        end
    },
    {
        name = "reset",
        help = "Alias for 'set 0 0 0 0'.",
        call = function()
            write("Position = ")
            private.display(lama.set(0, 0, 0, 0))
        end
    },
    {
        name = "list",
        help = "Prints a list of known waypoints.",
        call = function()
            for name, x, y, z, f in lama.waypoint.iter() do
                write(name .. " ")
                private.display(x, y, z, f)
            end
        end
    },
    {
        name = "add",
        help = "Adds a new waypoint.",
        call = function()
            local x, y, z, f = private.parse(3, true)
            if lama.waypoint.add(args[2], x, y, z, f) then
                print("Updated waypoint.")
            else
                print("Added waypoint.")
            end
        end
    },
    {
        name = "remove",
        help = "Removes a waypoint.",
        call = function()
            if not lama.waypoint.remove(args[2]) then
                print("No such waypoint.")
            else
                print("Removed waypoint.")
            end
        end
    }
}

-------------------------------------------------------------------------------
-- Helper functions                                                          --
-------------------------------------------------------------------------------

--[[
    Used to parse a coordinate from the arguments.

    @param start the index at which to start parsing.
    @param facingOptional whether the facing is optional.
]]
function private.parse(start, facingOptional)
    -- Get the raw string values.
    local x, y, z, f = args[start], args[start + 1],
                       args[start + 2], args[start + 3]

    -- Make sure we have all we need.
    if x == nil or y == nil or z == nil or
       (f == nil and not facingOptional)
    then
        error("Missing argument.")
    end

    -- Format the input.
    x = math.floor(tonumber(x))
    y = math.floor(tonumber(y))
    z = math.floor(tonumber(z))
    if f ~= nil then
        f = string.lower(f)
        -- Rawget to avoid error on invalid indexing.
        assert(rawget(lama.side, f), "Invalid facing '" .. f ..
            "'. Must be one of {north, east, south, west}.")
        f = lama.side[f]
    end

    -- Return the processed coordinates.
    return x, y, z, f
end

--[[
    Utility function for printing a coordinate.

    @param x the X coordinate.
    @param y the Y coordinate.
    @param z the Z coordinate.
    @param f the optional facing.
]]
function private.display(x, y, z, f)
    if f ~= nil then
        print(string.format("(%d, %d, %d, %s)", x, y, z, lama.side[f]))
    else
        print(string.format("(%d, %d, %d)", x, y, z))
    end
end

-------------------------------------------------------------------------------
-- Initialization                                                            --
-------------------------------------------------------------------------------

run()